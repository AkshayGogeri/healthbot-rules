/*
 * Detects routing-engine temperature threshold breaches and notifies when
 * anomalies are found.
 * Three inputs control detection
 *
 *   1) re_slot_no, is a regular expression that matches the routing engine
 *      that you would like to monitor.  By default it's '0-1', which matches
 *      both the routing engines. Use something like '0' to match only
 *      routing engine 0.
 *
 *   2) re_temperature_low_threshold, is the threshold that causes the
 *      rule to report an anomaly. By default it's 45 degree Cecilius of 
 *      RE temperature. This rule will set a dashboard color to green
 *      when temperature is below low threshold.
 * 
 *   3) re_temperature_high_threshold, is the threshold that causes the
 *      rule to report an anomaly. By default it's 55 degree Cecilius of RE 
 *      temperature. This rule will set a dashboard color to yellow when
 *      temperature is below high threshold. Otherwise color is set to
 *      red and notify anomaly.
 */
iceberg {
    topic chassis.temperatures {
        description "Monitors the chassis environment w.r.t power, fan and temperatures of chassis, REs' & FPCs' and notifies anomalies";
        synopsis "Chassis environment analyzer";
        rule check-re-temperature {
            synopsis "Routing-engine temperature check";
            description "Collects routing-engine (RE) temperature periodically and notifies anomaly when temperature exceed threshold";
            /*
             * Monitors RE temperature. Notifies via the dashboard colors
             * when the when temperature is below low threshold
             * {{re_temperature_low_threshold}} to green. The color is set
             * to yellow if we see temperature is below high threshold
             * {{re_temperature_high_threshold}}. Otherwise the color is
             * set to red and notify anomaly.
             * 
             * Use routing-engine slot number as key for rule.
             */
            keys routing-engine;
            /*
             * Sensor configuration to get data from network devices.
             */
            sensor components {
                synopsis "Chassis components sensor definition";
                description "/components open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /components/;
                    frequency 30s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field re-temperature {
                sensor components {
                    where "/components/component/properties/property/@name == 'temperature'";
                    path /components/component/properties/property/state/value;
                }
                description "RE temperature";
            }
            field routing-engine {
                sensor components {
                    where "/components/component/@name =~ /^Routing Engine[{{re_slot_no}}]*$/";
                    path "/components/component/@name";
                }
                description "RE name to monitor";
            }
            /*
             * Fields defined with variables and constant values
             */
            field high-threshold {
                constant {
                    value "{{re_temperature_high_threshold}}";
                }
                type integer;
                description "RE temperature high threshold";
            }
            field low-threshold {
                constant {
                    value "{{re_temperature_low_threshold}}";
                }
                type integer;
                description "RE temperature low threshold";
            }
            /*
             * Anomaly detection logic.
             */
            trigger re-temperature {
                synopsis "RE temperature KPI";
                description "Sets health based increase in RE temperature.";
                frequency 60s;
                /*
                 * Sets color to green when RE temperature
                 * re-temperature is below low threshold ($low-threshold).
                 */ 
                term is-re-temperature-normal {
                    when {
                        less-than-or-equal-to "$re-temperature" "$low-threshold";
                    }
                    then {
                        status {
                            color green;
                            message "$routing-engine temperature($re-temperature degree C) is lesser than low threshold($low-threshold degree C)";
                        }
                    }
                }
                /*
                 * Sets color to yellow and notify anomaly when RE temperature 
                 * ($re-temperature) is below high threshold
                 * ($high-threshold).
                 */  
                term is-re-temperature-median {
                    when {
                        less-than-or-equal-to "$re-temperature" "$high-threshold";
                    }
                    then {
                        status {
                            color yellow;
                            message "$routing-engine temperature($re-temperature degree C) is in medium range(>=$low-threshold, <=$high-threshold degree C)";
                        }
                    }
                }
                /*
                 * Defaults color to red and notify anomaly.
                 */ 
                term re-temperature-abnormal {
                    then {
                        status {
                            color red;
                            message "$routing-engine temperature($re-temperature degree C) is greater than high threshold($high-threshold degree C)";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable re_slot_no {
                value 0-1;
                description "Routing engine numbers to monitor, regular expression, e.g. '0'";
                type string;
            }
            variable re_temperature_high_threshold {
                value 55;
                description "RE temperature high threshold: Utilization increase between metrics, before we report anomaly";
                type int;
            }
            variable re_temperature_low_threshold {
                value 45;
                description "RE temperature low threshold: Utilization increase between metrics, before we report anomaly";
                type int;
            }
        }
    }
}
