/*
 * This rule checks interface out errors(all types) and notify in case any of the health monitored field crosses threshold
 */
iceberg {
    topic interface.statistics {
        description "This topic is to monitor and notify interface statitics i.e. link state, flaps, neighbor state, input & output traffic and errors";
        synopsis "Interface statistics analyzer";
        rule check-out-errors {
            /*
             * unique identifier of the rule is an interface name
             */
            keys interface-name;
            synopsis "Interface out-errors analyzer";
            description "This rule collects interface output error(errors(all), drops, discards, timeouts and runts) periodically and notifies in case of anomalies";
            /*
             * sensor configuration to get data from network devices
             */
            sensor interfaces {
                synopsis "interface open-config sensor definition";
                description "/interfaces open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /interfaces/;
                    frequency 30s;
                }
            }
            /*
             * Fileds defined using sensor path
             */
            field interface-name {
                sensor interfaces {
                    where "/interfaces/interface/@name =~ /{{interface_name}}/";
                    path "/interfaces/interface/@name";
                }
                type string;
                description "This field shows interfaces to be monitored";
            }
            field outerrors-stats-value {
                sensor interfaces {
                    path "/interfaces/interface/state/counters/{{outerrors_stats_name}}";
                }
                type integer;
                description "This field shows interface field's value";
            }
            /*
             * Fields defined with variables and constant values
             */
            field outerrors-high-threshold {
                constant {
                    value "{{outerrors_high_threshold}}";
                }
                type integer;
                description "This field is for interface out errors maximum threshold value";
            }
            /*
             * When an interface out error($outerrors-stats-value) count crosses threshold for period of 60 seconds then
             * sends an anomaly notification and sets color to red. When error count increases by one then sends anomaly
             * notification and sets color to yellow otherwise sets color to green.
             */
            trigger out-errors {
                synopsis "Interface out-errors kpi";
                description "Sets health based on interface out errors.";
                term is-interface-out-errors-abnormal {
                    when {
                        min-rate-of-increase "$outerrors-stats-value" {
                            rate "$outerrors-high-threshold";
                            time-range 60s;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name out errors($outerrors-stats-value) are above high threshold($outerrors-high-threshold)";
                        }
                    }
                }
                term is-interface-out-errors-median {
                    when {
                        min-rate-of-increase "$outerrors-stats-value" {
                            rate "$outerrors-high-threshold";
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name out errors($outerrors-stats-value) are abnormal";
                        }
                    }
                }
                term no-interface-out-errors {
                    then {
                        status {
                            color green;
                            message "$interface-name out errors($outerrors-stats-value) are below threshold";
                        }
                    }
                }
            }
            /*
             * Variables with default values which can be altered while deploying playbook instance
             */
            variable interface_name {
                value ".*";
                description "Enter interface names to be monitored in regular expression";
                type string;
            }
            variable outerrors_high_threshold {
                value 1;
                description "Enter interface out-errors maximum threshold value";
                type int;
            }
            variable outerrors_stats_name {
                value out-errors;
                description "Enter any one of interface specific out-error (Errors, Drops, Framing errors, Runts, Policed discards, L3 incompletes, L2 channel errors, L2 mismatch timeouts, FIFO errors, Resource errors) filed to be monitored";
                type string;
            }
        }
    }
}
