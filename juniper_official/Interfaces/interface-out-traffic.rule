#
#  This rule checks interfaces out traffic and notify in case any of the health monitored field crosses threshold
#
iceberg {
    topic interface.statistics {
        description "This topic is to monitor and notify interface statitics i.e. link state, flaps, neighbor state, input & output traffic and errors";
        synopsis "Interface statistics analyzer";
        rule check-out-traffic {
            keys interface-name;
            synopsis "interface output traffic analyzer";
            description "This rule collects output traffic(octets) periodically and notifies in case of traffic is above threshold";
            sensor interfaces {
                synopsis "interface open-config sensor definition";
                description "/interfaces open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /interfaces/;
                    frequency 10s;
                }
            }
            field interface-name {
                sensor interfaces {
                    where "/interfaces/interface/@name =~ /{{interface_name}}/";
                    path "/interfaces/interface/@name";
                }
                type string;
                description "This field shows interfaces to be monitored";
            }
            field outoctets-high-threshold {
                constant {
                    value "{{outoctets_high_threshold}}";
                }
                type integer;
                description "This field is for monitored interface field's maximum threshold value";
            }
            field outoctets-low-threshold {
                constant {
                    value "{{outoctets_low_threshold}}";
                }
                type integer;
                description "This field is for monitored interface field's minimum threshold value";
            }
            field outoctets-stats-value {
                sensor interfaces {
                    path "/interfaces/interface/state/counters/{{outoctets_stats_name}}";
                }
                type integer;
            }
            trigger out-traffic {
                synopsis "interface output traffic kpi";
                description "Sets health based on output traffic threshold.";
                term is-interface-stats-abnormal {
                    when {
                        min-rate-of-increase "$outoctets-stats-value" {
                            rate "$outoctets-high-threshold";
                            time-range 60s;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name out traffic is above high threshold($outoctets-high-threshold octets)";
                        }
                    }
                }
                term is-interface-stats-median {
                    when {
                        min-rate-of-increase "$outoctets-stats-value" {
                            rate "$outoctets-low-threshold";
                            time-range 60s;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name out traffic is in medium range(>=$outoctets-low-threshold,<=$outoctets-high-threshold octets)";
                        }
                    }
                }
                term is-interface-stats-normal {
                    then {
                        status {
                            color green;
                            message "$interface-name out traffic is below low threshold($outoctets-low-threshold octets)";
                        }
                    }
                }
            }
            variable interface_name {
                value ".*";
                description "Enter interface names to be monitored in regular expression";
                type string;
            }
            variable outoctets_high_threshold {
                value 800000000;
                description "Enter interface field's stats maximum threshold values if default value not matches with your requirement";
                type int;
            }
            variable outoctets_low_threshold {
                value 500000000;
                description "Enter interface field's stats maximum threshold values if default value not matches with your requirement";
                type int;
            }
            variable outoctets_stats_name {
                value in-octets;
                description "Enter any one of interface filedto be monitored. In case morethan on field to be monitored, seperate instance to be created for each";
                type string;
            }
        }
    }
}
