/*
 * This rule checks interfaces in traffic and notify in case any of the health monitored field crosses threshold
 */
iceberg {
    topic interface.statistics {
        description "This topic is to monitor and notify interface statitics i.e. link state, flaps, neighbor state, input & output traffic and errors";
        synopsis "Interface statistics analyzer";
        rule check-in-traffic {
            /*
             * unique identifier of the rule is an interface name
             */
            keys interface-name;
            synopsis "interface input traffic analyzer";
            description "This rule collects input traffic(octets) periodically and notifies in case of traffic is above threshold";
            /*
             * sensor configuration to get data from network devices
             */
            sensor interfaces {
                synopsis "interface open-config sensor definition";
                description "/interfaces open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /interfaces/;
                    frequency 30s;
                }
            }
            /*
             * Fields defined with variables and constant values
             */
            field inoctets-high-threshold {
                constant {
                    value "{{inoctets_high_threshold}}";
                }
                type integer;
                description "This field is for monitored interface field's high threshold value";
            }
            field inoctets-low-threshold {
                constant {
                    value "{{inoctets_low_threshold}}";
                }
                type integer;
                description "This field is for monitored interface field's low threshold value";
            }
            /*
             * Fileds defined using sensor path
             */
            field inoctets-stats-value {
                sensor interfaces {
                    path "/interfaces/interface/state/counters/{{inoctets_stats_name}}";
                }
                type integer;
                description "This field shows interface field's value";
            }
            field interface-name {
                sensor interfaces {
                    where "/interfaces/interface/@name =~ /{{interface_name}}/";
                    path "/interfaces/interface/@name";
                }
                type string;
                description "This field shows interfaces to be monitored";
            }
            /*
             * When an interface input octets($inoctets-stats-value) count crosses high threshold then sends anomaly notification and sets color
             * to red. When count is below low threshold then sets color to green. When count is between low and high threshold then sends anomaly
             * notification and sets color to yellow.
             */
            trigger in-traffic {
                synopsis "interface input traffic kpi";
                description "Sets health based on input traffic threshold.";
                term is-interface-in-traffic-abnormal {
                    when {
                        min-rate-of-increase "$inoctets-stats-value" {
                            rate "$inoctets-high-threshold";
                            time-range 60s;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$interface-name in traffic is above high threshold($inoctets-high-threshold octets)";
                        }
                    }
                }
                term is-interface-in-traffic-median {
                    when {
                        min-rate-of-increase "$inoctets-stats-value" {
                            rate "$inoctets-low-threshold";
                            time-range 60s;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$interface-name in traffic is in medium range(>=$inoctets-low-threshold,<=$inoctets-high-threshold  octets)";
                        }
                    }
                }
                term interface-in-traffic-normal {
                    then {
                        status {
                            color green;
                            message "$interface-name in traffic is below low threshold($inoctets-low-threshold octets)";
                        }
                    }
                }
            }
            /*
             * Variables with default values which can be altered while deploying playbook instance
             */
            variable inoctets_high_threshold {
                value 800000000;
                description "Enter in octets high threshold value. Default value for 1G interface is 800000000. Modify default value for 10G is 8000000000 and 100G is 80000000000";
                type int;
            }
            variable inoctets_low_threshold {
                value 500000000;
                description "Enter in octets low threshold value. Default value for 1G interface is 500000000. Modify default value for 10G is 5000000000 and 100G is 50000000000";
                type int;
            }
            variable inoctets_stats_name {
                value in-octets;
                description "Enter interface filed to be monitored";
                type string;
            }
            variable interface_name {
                value ".*";
                description "Enter interface filed(in-octets or in-pkts or in-unicast-pkts) to be monitored";
                type string;
            }
        }
    }
}
