/*
 *  This rule checks health of each bgp session and notify in case any of the health monitored field crosses threshold
 */
iceberg {
    topic protocol.bgp {
        description "This topic is to monitors and notify bgp sessions statitics i.e. neighbor state, detects flaps, route damping and max received-routes count";
        synopsis "bgp session statistics analyzer";
        rule check-bgp-received-routes {
            description "This rule collects bgp session received router count periodically and notifies in case of anomalies";
            synopsis "bgp session state analyzer";
            /*
             * unique identifier of the rule is bgp neighbor address
             */
            keys [address-table neighbor-address];
            /*
             * sensor configuration to get data from network devices
             */
            sensor bgp-sensor {
                synopsis "bgp open-config sensor definition";
                description "/protocol/bgp open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /network-instances/network-instance/protocols/protocol/bgp/;
                    frequency 30s;
                }
            }
            /*
             * Fields defined using sensor path
             */
            field instance-name {
                sensor bgp-sensor {
                    where "/network-instances/network-instance/@instance-name =~ /{{routing_instance}}/";
                    path "/network-instances/network-instance/@instance-name";
                }
                type string;
                description "This field is for routing instance";
            }
            field neighbor-address {
                sensor bgp-sensor {
                    where "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/@neighbor-address =~ /{{neighbors}}/";
                    path "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/@neighbor-address";
                }
                type string;
                description "This field is for neighbor address";
            }
            field address-table {
                sensor bgp-sensor {
                    where "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/@afi-safi-name =~ /{{addr_table}}/";
                    path "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/@afi-safi-name";
                }
                type string;
                description "This field is for address tables";
            }
            field received-routes {
                sensor bgp-sensor {
                    path /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received;
                }
                type integer;
                description "This field is for received routes from neighbor";
            }
            /*
             * Fields defined with variables and constant values
             */
            field received-route-count-threshold {
                constant {
                    value "{{max_received_route_count_threshold}}";
                }
                type integer;
                description "Set received route count threshold";
            }
            /*
             * When  received route($received-routes) count on any session is above threshold then sends anomaly notification and sets color
             * to red otherwise sets color to green.
             */
            trigger received-routes {
                synopsis "bgp max received routes kpi";
                description "Sets health based on bgp max received routes.";
                term is-rcd-route-count-above-threshold {
                    when {
                        greater-than-or-equal-to "$received-routes" $received-route-count-threshold;
                    }
                    then {
                        status {
                            color red;
                            message "Received route count is above threshold i.e.($received-routes)";
                        }
                    }
                }
                term rcd-route-count-normal {
                    then {
                        status {
                            color green;
                            message "Received route count below threshold i.e.($received-routes)";
                        }
                    }
                }
            }
            /*
             * Variables with default values which can be altered while deploying playbook instance
             */
            variable neighbors {
                value .*;
                description "Enter neighbor name or address using regular expression";
                type string;
            }
            variable addr_table {
                value .+;
                type string;
                description "Enter address table name using regular expression";
            }
            variable routing_instance {
                value .*;
                type string;
                description "Enter routing instance name using regular expression";
            }
            variable max_received_route_count_threshold {
                value 10000;
                type int;
                description "Enter received routes count threshold value using regular expression";
            }
        }
    }
}
