/*
 * Detects RE CPU utilization threshold breaches and notifies when anomalies
 * are found.
 * Three inputs control detection
 * 
 *   1) re_slot_No, is a regular expression that matches the routing engine
 *      that you would like to monitor.  By default it's '0-1', which matches
 *      both the routing engines. Use something like '0' to match only
 *      routing engine 0.
 * 
 *   2) re_cpu_high_threshold, is the threshold that causes the rule to report
 *      an anomaly. By default it's 80% of CPU utilization. This rule will set
 *      a dashboard color to red when RE CPU utilization exceeds high threshold
 *      're_cpu_high_threshold' for a period of 5 minutes.
 * 
 *   3) re_cpu_low_threshold, is the threshold that causes the rule to report
 *      an anomaly. By default it's 50% of CPU utilization. This rule will set 
 *      a dashboard color to yellow when RE CPU utilization exceeds low 
 *      threshold 're_cpu_low_threshold' for a period of 5 minutes.
 *      Otherwise color is set to green.
 */
iceberg {
    topic system.cpu {
        description "Monitors system statistics i.e. CPU, memory, storage, processes & queues and notifies anomalies";
        synopsis "System statistics analyzer";
        rule check-system-cpu {
            description "Collects system RE CPU statistics periodically and notifies anomalies when CPU utilization exceeds threshold.";
            synopsis "Routing engine CPU analyzer";
            /*
             * Monitors all the REs CPU utilization. Notifies via the
             * dashboard colors when the RE CPU utilization exceed by
             * {{re_cpu_high_threshold}} for every collected metric during a
             * 5m time range (red). The color is set to yellow if we see
             * RE CPU utilization exceeds {{re_cpu_low_threshold}} for every
             * collected metric during a 5m time range. Otherwise the color is
             * set to green.
             * 
             * Use routing engine name as key for rule.
             */
            keys routing-engine;
            /*
             * Router provides RE CPU idle percent hence function derives used
             * percent.
             */
            function subtract {
                description "Subtracts cpu-idle% from 100 to get CPU used percent";
                path system-sensors.py;
                method subtract;
                argument threshold {
                    mandatory;
                }
            }
            /*
             * Sensor configuration to get data from network devices.
             */
            sensor components {
                synopsis "system components open-config sensor definition";
                description "/components open-config sensor to collect telemetry data from network device";
                open-config {
                    sensor-name /components/;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field re-cpu-utilization-oc {
                sensor components {
                    where "/components/component/properties/property/@name == 'cpu-utilization-idle'";
                    path /components/component/properties/property/state/value;
                }
                description "RE CPU idle utilization";
            }
            field routing-engine {
                sensor components {
                    where "/components/component/@name =~ /^Routing Engine[{{re_slot_No}}]*$/";
                    path "/components/component/@name";
                }
                description "RE name to monitor";
            }
            /*
             * Fields defined using formulae by user-defined function
             */
            field re-cpu-utilization {
                formula {
                    user-defined-function {
                        function-name subtract;
                        argument threshold $re-cpu-utilization-oc;
                    }
                }
                type integer;
                description "Derives used percentage from idle CPU utilization";
            }
            /*
             * Fields defined with variables and constant values
             */
            field re-cpu-utilization-high-threshold {
                constant {
                    value "{{re_cpu_high_threshold}}";
                }
                type integer;
                description "RE CPU utilization high threshold";
            }
            field re-cpu-utilization-low-threshold {
                constant {
                    value "{{re_cpu_low_threshold}}";
                }
                type integer;
                description "RE CPU utilization low threshold";
            }
            /*
             * Anomaly detection logic.
             */
            trigger re-cpu-utilization {
                synopsis "Routing engine CPU KPI";
                description "Sets health based on increase in RE CPU utilization.";
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the CPU utilization ($re-cpu-utilization) exceeds high
                 * threshold ($re-cpu-utilization-low-threshold) for all points
                 * in a 5 minute period.
                 */                       
                term is-re-cpu-utilization-abnormal {
                    when {
                        greater-than-or-equal-to "$re-cpu-utilization" "$re-cpu-utilization-high-threshold" {
                            time-range 5m;
                            all;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "$routing-engine CPU utilization($re-cpu-utilization) exceeds high threshold($re-cpu-utilization-high-threshold)";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification
                 * when the CPU utilization ($re-cpu-utilization) exceeds low 
                 * threshold ($re-cpu-utilization-low-threshold) for all points
                 * in a 5 minute period.
                 */           
                term is-re-cpu-utilization-median {
                    when {
                        greater-than-or-equal-to "$re-cpu-utilization" "$re-cpu-utilization-low-threshold" {
                            time-range 5m;
                            all;
                        }
                    }
                    then {
                        status {
                            color yellow;
                            message "$routing-engine CPU utilization($re-cpu-utilization) in medium range";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */                
                term re-cpu-utilization-normal {
                    then {
                        status {
                            color green;
                            message "$routing-engine CPU utilization($re-cpu-utilization) is normal";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable re_slot_No {
                value 0-1;
                description "Routing engine numbers to monitor, regular expression, e.g. '0'";
                type string;
            }
            variable re_cpu_high_threshold {
                value 80;
                description "RE CPU utilization high threshold: Utilization increase between metrics, before we report anomaly";
                type int;
            }
            variable re_cpu_low_threshold {
                value 50;
                description "RE CPU utilization low threshold: Utilization increase between metrics, before we report anomaly";
                type int;
            }
        }
    }
}
